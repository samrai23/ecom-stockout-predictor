name: AWS Deployment Pipeline

on:
  push:
    branches: [ "main" ]
    paths:
      - 'glue-etl/**'
      - 'lambda-alerts/**'
      - 'redshift-ml/**'
      - '.github/workflows/aws-deploy.yml'

env:
  AWS_REGION: us-east-1
  GLUE_SCRIPT_BUCKET: ecom-glue-temp-${{ github.run_id }}
  LAMBDA_ZIP: lambda-alerts.zip

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Python Dependencies
        run: |
          cd lambda-alerts && pip install -r requirements.txt -t ./package
          cd ../glue-etl && pip install -r requirements.txt -t ./python_modules

      - name: Package Lambda
        run: |
          cd lambda-alerts && zip -r ../${{ env.LAMBDA_ZIP }} ./*
          aws s3 cp ${{ env.LAMBDA_ZIP }} s3://${{ env.GLUE_SCRIPT_BUCKET }}

      - name: Deploy Glue Jobs
        run: |
          aws s3 cp glue-etl/ s3://${{ env.GLUE_SCRIPT_BUCKET }}/scripts/ --recursive
          aws glue create-job \
            --name ecom-sales-cleaning \
            --role ${{ secrets.GLUE_ROLE_ARN }} \
            --command '{
              "Name": "glueetl",
              "ScriptLocation": "s3://${{ env.GLUE_SCRIPT_BUCKET }}/scripts/sales_cleaning.py",
              "PythonVersion": "3"
            }' \
            --glue-version "4.0" \
            --number-of-workers 2 \
            --worker-type "G.1X"

      - name: Deploy Lambda
        run: |
          aws lambda create-function \
            --function-name StockoutAlert \
            --runtime python3.9 \
            --handler stockout_alert.lambda_handler \
            --code S3Bucket=${{ env.GLUE_SCRIPT_BUCKET }},S3Key=${{ env.LAMBDA_ZIP }} \
            --role ${{ secrets.LAMBDA_ROLE_ARN }} \
            --environment "Variables={REDSHIFT_HOST=${{ secrets.REDSHIFT_HOST }},REDSHIFT_PASSWORD=${{ secrets.REDSHIFT_PASSWORD }}"

      - name: Deploy Redshift ML
        run: |
          aws redshift-data execute-statement \
            --cluster-identifier ${{ secrets.REDSHIFT_CLUSTER }} \
            --database dev \
            --db-user admin \
            --sql "`cat redshift-ml/train_model.sql`"

      - name: Cleanup
        run: aws s3 rm s3://${{ env.GLUE_SCRIPT_BUCKET }} --recursive